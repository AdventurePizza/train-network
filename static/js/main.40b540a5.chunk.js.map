{"version":3,"sources":["contexts/AuthProvider.tsx","components/spinner.svg","contexts/firebaseContext.tsx","components/chat.tsx","App.tsx","index.tsx"],"names":["web3","Web3","ethereum","e","console","log","chainIDMap","msgParams","nonce","type","name","value","AuthContext","React","createContext","jwt","signIn","isLoggedIn","AuthProvider","props","useState","hasTriedAutoSignIn","setHasTriedAutoSignIn","balance","setBalance","setJWT","network","setNetwork","provider","setProvider","setIsLoggedIn","accountId","setAccountId","getBalance","address","ethers","Web3Provider","window","balanceInEth","formatEther","handleAccountsChanged","useCallback","accounts","newAccount","length","handleChainChange","chainId","Promise","resolve","reject","parseInt","eth","getAccounts","then","error","connectMetamask","request","method","on","catch","err","code","onLogin","userData","accessToken","publicAddress","localStorage","setItem","socket","emit","token","verifyLogin","account","fetchAuthUserData","res","ok","json","statusText","net","getId","autoSignIn","localjwt","getItem","generateToken","useEffect","connectResult","alert","Provider","children","getUserInfo","userInfo","handleSignup","signupRes","signMsg","signature","authAccountSig","fetch","fetchBase","headers","body","JSON","stringify","response","from","currentProvider","sendAsync","params","result","message","Authorization","FirebaseContext","getMessages","isSuccessful","postMessage","FirebaseProvider","useContext","fetchAuthenticated","path","last","fetchRes","Chat","post","setPost","posts","setPosts","loading","setLoading","sendMessage","content","timestamp","Date","now","concat","onNewMessage","data","off","getPosts","style","display","justifyContent","width","marginTop","TextField","label","variant","onChange","event","target","onKeyPress","key","fullWidth","Button","onClick","alt","src","spinner","map","textAlign","padding","App","height","backgroundColor","socketURL","location","hostname","io","transports","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.40b540a5.chunk.js","sourcesContent":["// @ts-nocheck\nimport * as ethers from 'ethers';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport Web3 from 'web3';\n\nlet web3: Web3;\ndeclare let ethereum: any;\n\ntry {\n\tweb3 = new Web3(ethereum);\n} catch (e) {\n\tconsole.log('Please use the metamask extension');\n}\n\n\nconst chainIDMap: { [key: string]: string } = {\n\t'1': 'ethereum',\n\t'56': 'BSC',\n\t'97': 'BSC testnet',\n\t'137': 'polygon',\n\t'80001': 'mumbai'\n};\n\nconst msgParams = (nonce: string) => [\n\t{\n\t\ttype: 'string', // Any valid solidity type\n\t\tname: 'Message', // Any string label you want\n\t\tvalue: 'Hi, please sign in' // The value to sign\n\t},\n\t{\n\t\ttype: 'string',\n\t\tname: 'One-time nonce',\n\t\tvalue: nonce\n\t}\n];\n\nexport interface IAuthContext {\n\tjwt: string;\n\tsignIn: () => void;\n\taccountId?: string;\n\tisLoggedIn: boolean;\n\tprovider?: ethers.providers.Web3Provider;\n\tnetwork?: string;\n\tbalance?: string;\n}\n\nexport const AuthContext = React.createContext<IAuthContext>({\n\tjwt: '',\n\tsignIn: () => { },\n\tisLoggedIn: false\n});\n\ninterface IAuthProviderProps {\n\tchildren: React.ReactNode;\n\tsocket: SocketIOClient.Socket;\n}\n\nexport const AuthProvider = (props: IAuthProviderProps) => {\n\tconst [hasTriedAutoSignIn, setHasTriedAutoSignIn] = useState(false);\n\tconst [balance, setBalance] = useState<string>('');\n\tconst [jwt, setJWT] = useState('');\n\tconst [network, setNetwork] = useState<string>('');\n\tconst [provider, setProvider] = useState<ethers.providers.Web3Provider>();\n\tconst [isLoggedIn, setIsLoggedIn] = useState<boolean>(false);\n\t// for logged in acct\n\tconst [accountId, setAccountId] = useState<string>();\n\n\tconst getBalance = async (address) => {\n\t\ttry {\n\t\t\tconst provider = new ethers.providers.Web3Provider(window.ethereum);\n\t\t\tconst balance = await provider.getBalance(address);\n\t\t\tconst balanceInEth = ethers.utils.formatEther(balance);\n\t\t\tconsole.log(balanceInEth);\n\t\t\tsetBalance(balanceInEth)\n\t\t} catch (error) {\n\t\t\tconsole.log(error)\n\t\t\tsetBalance(\"unknown\")\n\t\t}\n\n\t};\n\n\tconst handleAccountsChanged = useCallback(\n\t\tasync (accounts: string[]) => {\n\n\t\t\tlet newAccount = '';\n\t\t\tif (accounts.length === 0) {\n\t\t\t\t// MetaMask is locked or the user has not connected any accounts\n\t\t\t\tconsole.log('Please connect to MetaMask.');\n\t\t\t} else if (accounts[0] !== accountId) {\n\t\t\t\tnewAccount = accounts[0];\n\t\t\t\tgetBalance(accounts[0])\n\t\t\t}\n\n\t\t\tsetAccountId(newAccount);\n\t\t},\n\t\t[accountId]\n\t);\n\n\tconst handleChainChange = useCallback(\n\t\tasync (\n\t\t\tchainId: number | string\n\t\t): Promise<{\n\t\t\terror?: string;\n\t\t\taccountId?: string;\n\t\t\tnetwork?: string;\n\t\t}> => {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tlet error;\n\t\t\t\tlet accountId;\n\n\t\t\t\t// handle case chainId is given hexadecimal\n\t\t\t\tif (typeof chainId === 'string') {\n\t\t\t\t\tchainId = parseInt(chainId, 16);\n\t\t\t\t}\n\n\t\t\t\tlet network = chainIDMap[chainId] || 'Unknown';\n\n\n\t\t\t\tweb3.eth.getAccounts().then(async (accounts) => {\n\t\t\t\t\tif (!accounts || !accounts.length) {\n\t\t\t\t\t\terror = 'No metamask account found, connect metamask';\n\t\t\t\t\t\tresolve({ error });\n\t\t\t\t\t} else {\n\t\t\t\t\t\taccountId = accounts[0];\n\n\t\t\t\t\t\tgetBalance(accounts[0])\n\t\t\t\t\t\tresolve({ accountId, network });\n\t\t\t\t\t\tsetNetwork(network);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t},\n\t\t[]\n\t);\n\n\tconst connectMetamask = useCallback(() => {\n\t\treturn new Promise<string | null>(async (resolve) => {\n\t\t\tif (!window.ethereum) return null;\n\n\t\t\tconst chainId = await ethereum.request({ method: 'eth_chainId' });\n\t\t\tconsole.log(chainId)\n\n\n\t\t\thandleChainChange(chainId);\n\n\t\t\tethereum.on('chainChanged', handleChainChange);\n\n\t\t\tethereum\n\t\t\t\t.request({ method: 'eth_requestAccounts' })\n\t\t\t\t.then((accounts: string[]) => {\n\t\t\t\t\thandleAccountsChanged(accounts);\n\n\t\t\t\t\tconst provider = new ethers.providers.Web3Provider(ethereum, 'any');\n\t\t\t\t\tsetProvider(provider);\n\t\t\t\t\tresolve(accounts[0] ?? null);\n\t\t\t\t\t//   onConnect(provider);\n\t\t\t\t})\n\t\t\t\t.catch((err: any) => {\n\t\t\t\t\tif (err.code === 4001) {\n\t\t\t\t\t\t// EIP-1193 userRejectedRequest error\n\t\t\t\t\t\t// If this happens, the user rejected the connection request.\n\t\t\t\t\t\tconsole.log('Please connect to MetaMask.');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error(err);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t});\n\t}, [handleAccountsChanged, handleChainChange]);\n\n\tconst onLogin = useCallback(\n\t\t(userData: IUserData, accessToken: string) => {\n\t\t\tsetIsLoggedIn(true);\n\t\t\tsetAccountId(userData.publicAddress);\n\t\t\tsetJWT(accessToken);\n\t\t\tlocalStorage.setItem('jwt', accessToken);\n\n\t\t\tprops.socket.emit('authenticate', { token: accessToken });\n\t\t\tconst provider = new ethers.providers.Web3Provider(ethereum, 'any');\n\t\t\tsetProvider(provider);\n\t\t},\n\t\t[props.socket]\n\t);\n\n\tconst verifyLogin = useCallback(\n\t\t(account: string, accessToken: string) => {\n\t\t\treturn new Promise<{ error?: string }>(async (resolve, reject) => {\n\t\t\t\tfetchAuthUserData(accessToken).then(async (res) => {\n\t\t\t\t\tif (res.ok && account) {\n\t\t\t\t\t\tconst userData = (await res.json()) as IUserData;\n\t\t\t\t\t\tonLogin(userData, accessToken);\n\t\t\t\t\t\tresolve({});\n\t\t\t\t\t} else resolve({ error: res.statusText });\n\t\t\t\t});\n\t\t\t\t//console.log(account + \" \" + accessToken)\n\t\t\t\ttry {\n\t\t\t\t\tconst chainId = await web3.eth.net.getId();\n\t\t\t\t\tawait handleChainChange(chainId);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.log(error)\n\t\t\t\t}\n\n\t\t\t});\n\t\t},\n\t\t[onLogin, handleChainChange]\n\t);\n\n\tconst autoSignIn = useCallback(async () => {\n\t\tsetHasTriedAutoSignIn(true);\n\t\tconst localjwt = localStorage.getItem('jwt');\n\n\t\tlet account = accountId;\n\t\tif (!accountId) {\n\t\t\taccount = (await connectMetamask()) || '';\n\t\t}\n\t\tif (account) {\n\t\t\tif (localjwt) {\n\t\t\t\tlet authres = await verifyLogin(account, localjwt)\n\t\t\t\tif (authres.error) {\n\t\t\t\t\tconst accessToken = await generateToken(account);\n\t\t\t\t\tverifyLogin(account, accessToken);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst accessToken = await generateToken(account);\n\t\t\t\tverifyLogin(account, accessToken);\n\t\t\t}\n\t\t}\n\t}, [verifyLogin, accountId, connectMetamask]);\n\n\tuseEffect(() => {\n\t\tif (!hasTriedAutoSignIn) {\n\t\t\tautoSignIn();\n\t\t}\n\t}, [autoSignIn, hasTriedAutoSignIn]);\n\n\tconst signIn = async () => {\n\t\tconsole.log(\"signIN\")\n\t\tconst localjwt = localStorage.getItem('jwt');\n\n\t\tlet account = accountId;\n\n\t\tif (accountId) {\n\t\t\tif (localjwt) {\n\t\t\t\tverifyLogin(accountId, localjwt);\n\t\t\t}\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tconst connectResult = await connectMetamask();\n\t\t\t\tif (connectResult === null) return alert('error signing in');\n\t\t\t\taccount = connectResult;\n\t\t\t} catch (e) {\n\t\t\t\treturn console.log('error connecting');\n\t\t\t}\n\t\t}\n\n\t\tif (!account) return;\n\n\t\tconst accessToken = await generateToken(account);\n\n\t\tverifyLogin(account, accessToken);\n\t};\n\n\treturn (\n\t\t<AuthContext.Provider\n\t\t\tvalue={{\n\t\t\t\tjwt,\n\t\t\t\tsignIn,\n\t\t\t\taccountId,\n\t\t\t\tisLoggedIn,\n\t\t\t\tprovider,\n\t\t\t\tnetwork,\n\t\t\t\tbalance\n\t\t\t}}\n\t\t>\n\t\t\t{props.children}\n\t\t</AuthContext.Provider>\n\t);\n};\n\nconst generateToken = async (account: string) => {\n\tconst userInfo = await getUserInfo(account);\n\n\tlet publicAddress: string;\n\tlet nonce: string;\n\n\tif (!userInfo) {\n\t\tconst signupRes = await handleSignup(account);\n\n\t\tpublicAddress = signupRes.publicAddress;\n\t\tnonce = signupRes.nonce;\n\t} else {\n\t\tpublicAddress = userInfo.publicAddress;\n\t\tnonce = userInfo.nonce;\n\t}\n\n\tconst { signature } = await signMsg(publicAddress, nonce);\n\n\tconst { accessToken } = await authAccountSig(publicAddress, signature);\n\n\treturn accessToken;\n};\n\nconst getUserInfo = (accountId: string): Promise<IGetUserInfo | null> =>\n\tfetch(fetchBase + `/users/${accountId}`)\n\t\t.then((res) => res.json())\n\t\t.then(async (res: IGetUserInfo) => {\n\t\t\tif (!res.nonce || !res.publicAddress) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn res;\n\t\t});\n\nconst authAccountSig = (\n\tpublicAddress: string,\n\tsignature: string\n): Promise<{ accessToken: string; userData: IUserData }> =>\n\tfetch(fetchBase + '/auth', {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json'\n\t\t},\n\t\tbody: JSON.stringify({ publicAddress, signature })\n\t}).then((res) => res.json());\n\nconst handleSignup = (\n\tpublicAddress: string\n): Promise<{ publicAddress: string; nonce: string }> => {\n\treturn fetch(fetchBase + '/users', {\n\t\tbody: JSON.stringify({ publicAddress }),\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json'\n\t\t},\n\t\tmethod: 'POST'\n\t}).then((response) => response.json());\n};\nfunction signMsg(from: string, nonce: string) {\n\treturn new Promise<{ publicAddress: string; signature: string }>(\n\t\t(resolve, reject) => {\n\t\t\tif (!web3 || !web3.currentProvider) {\n\t\t\t\tweb3 = new Web3(ethereum);\n\t\t\t}\n\t\t\t// reject(\"no web3 library and/or provider found\");\n\n\t\t\t//@ts-ignore\n\t\t\tweb3.currentProvider?.sendAsync(\n\t\t\t\t{\n\t\t\t\t\tmethod: 'eth_signTypedData',\n\t\t\t\t\tparams: [msgParams(nonce), from],\n\t\t\t\t\tfrom: from\n\t\t\t\t},\n\t\t\t\tfunction (err: string, result: any) {\n\t\t\t\t\tif (err) return console.error(err);\n\t\t\t\t\tif (result.error) {\n\t\t\t\t\t\tconsole.error(result.error.message);\n\t\t\t\t\t\treject(result.error.message);\n\t\t\t\t\t}\n\t\t\t\t\tresolve({ publicAddress: from, signature: result.result });\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t);\n}\n\nconst fetchBase =\n\tprocess.env.NODE_ENV === 'development'\n\t\t? ''\n\t\t: 'https://train-network.herokuapp.com/';\n\nconst fetchAuthUserData = (jwt: string) =>\n\tfetch(fetchBase + '/users/auth', {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\t//   \"Content-Type\": \"application/json\",\n\t\t\tAuthorization: 'Bearer ' + jwt\n\t\t}\n\t});\n","export default __webpack_public_path__ + \"static/media/spinner.d99b4eae.svg\";","// @ts-nocheck\nimport React, { useCallback, useContext } from \"react\";\nimport { AuthContext } from './AuthProvider';\n\n\nexport const FirebaseContext = React.createContext<IFirebaseContext>({\n  getMessages: () => Promise.resolve({ isSuccessful: false }),\n  postMessage: () => Promise.resolve({ isSuccessful: false }),\n});\n\nconst fetchBase =\n  process.env.NODE_ENV === \"development\"\n    ? \"\"\n    : \"https://train-network.herokuapp.com/\";\n\nexport const FirebaseProvider: React.FC = ({ children }) => {\n\n  const { isLoggedIn, jwt } = useContext(AuthContext);\n\n  const fetchAuthenticated = useCallback(\n    (path: string, request: Partial<RequestInit>) => {\n      return fetch(fetchBase + path, {\n        ...request,\n        headers:\n          isLoggedIn && jwt\n            ? {\n              ...request.headers,\n              Authorization: 'Bearer ' + jwt\n            }\n            : {\n              ...request.headers\n            }\n      });\n    },\n    [jwt, isLoggedIn]\n  );\n\n  const getMessages = useCallback(\n    async (last): Promise<IFetchResponseBase> => {\n      const fetchRes = await fetchAuthenticated(`chatRouter/messages`, {\n        method: \"GET\",\n      });\n\n      if (fetchRes.ok) {\n        return await fetchRes.json();\n      }\n    },\n    [fetchAuthenticated]\n  );\n\n  const postMessage = useCallback(\n    async (message): Promise<IFetchResponseBase> => {\n      const fetchRes = await fetchAuthenticated(`chatRouter/message`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ message: message }),\n      });\n\n      if (fetchRes.ok) {\n        return await fetchRes.json();\n      }\n    },\n    [fetchAuthenticated]\n  );\n\n  return (\n    <FirebaseContext.Provider\n      value={{\n        getMessages,\n        postMessage\n      }}\n    >\n      {children}\n    </FirebaseContext.Provider>\n  );\n};\n","// @ts-nocheck\nimport React, { useEffect, useContext } from 'react'\nimport { Button, TextField } from \"@material-ui/core\";\nimport spinner from './spinner.svg';\nimport { FirebaseContext } from \"../contexts/firebaseContext\";\nimport { AuthContext } from '../contexts/AuthProvider';\n\nexport const Chat = ({ socket }) => {\n\tconst [post, setPost] = React.useState(\"\");\n\tconst [posts, setPosts] = React.useState([]);\n\tconst [loading, setLoading] = React.useState(false);\n\n\tconst { postMessage, getMessages } = useContext(FirebaseContext);\n\n\tconst {\n\t\taccountId,\n\t} = useContext(AuthContext);\n\n\tuseEffect(() => {\n\t\tconst onNewMessage = (data) => {\n\t\t\tconsole.log(\"newmessage\")\n\t\t\tconsole.log(data)\n\n\t\t\tsetPosts([\n\t\t\t\tdata,\n\t\t\t].concat(posts))\n\t\t};\n\n\t\tsocket.on(\"newMessage\", onNewMessage);\n\n\t\treturn () => {\n\t\t\tsocket.off(\"newMessage\", onNewMessage);\n\t\t};\n\t}, [socket, posts]);\n\n\tasync function sendMessage() {\n\t\tsetLoading(true)\n\n\t\ttry {\n\t\t\tawait postMessage({ address: accountId, content: post })\n\t\t\tsetPosts([\n\t\t\t\t{\n\t\t\t\t\taddress: accountId,\n\t\t\t\t\tcontent: post,\n\t\t\t\t\ttimestamp: Date.now()\n\t\t\t\t},\n\t\t\t].concat(posts))\n\t\t\tsetPost(\"\")\n\t\t\tsetLoading(false)\n\t\t} catch (error) {\n\t\t\tconsole.log(error)\n\t\t\tsetLoading(false)\n\t\t}\n\t}\n\n\tconst handleChange = (event) => {\n\t\tif (event.target.value.length < 510) {\n\t\t\tsetPost(event.target.value);\n\t\t}\n\t};\n\n\tconst handleKeyPress = (event) => {\n\t\tif (event.key === \"Enter\") {\n\t\t\tsendMessage();\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tasync function getPosts() {\n\t\t\tlet result = await getMessages();\n\t\t\tconsole.log(result)\n\t\t\tsetPosts(result);\n\t\t}\n\t\tgetPosts();\n\t}, [getMessages]);\n\n\treturn (\n\t\t<div style={{ display: \"flex\", justifyContent: \"center\" }}>\n\n\t\t\t<div style={{ width: \"70vw\", marginTop: 20 }}>\n\t\t\t\t<div>\n\t\t\t\t\t<TextField\n\t\t\t\t\t\tlabel=\"Type here\"\n\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\tvalue={post}\n\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\tonKeyPress={handleKeyPress}\n\t\t\t\t\t\tfullWidth\n\t\t\t\t\t/>\n\n\t\t\t\t\t<Button\n\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\tonClick={async () => {\n\t\t\t\t\t\t\tsendMessage();\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t{loading ? <img alt=\"loading\" src={spinner} style={{ width: 60 }} ></img> : \"Post\"}\n\t\t\t\t\t</Button>\n\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<br></br>\n\t\t\t\t\t\t{posts &&\n\t\t\t\t\t\t\tposts.map((post) => (\n\t\t\t\t\t\t\t\t<div key={post.timestamp}>\n\t\t\t\t\t\t\t\t\t{post.content}\n\t\t\t\t\t\t\t\t\t<br></br>\n\t\t\t\t\t\t\t\t\t<div style={{ textAlign: \"right\" }}>\n\t\t\t\t\t\t\t\t\t\t<b style={{ textAlign: \"right\", padding: 10 }}>{post.address}</b>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<br></br>\n\t\t\t\t\t\t\t\t\t<br></br>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t))\n\t\t\t\t\t\t}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n","// @ts-nocheck\nimport { useContext } from 'react';\n\nimport Button from '@material-ui/core/Button';\nimport { Chat } from \"./components/chat\";\nimport { AuthContext } from './contexts/AuthProvider';\n\nfunction App({ socket }) {\n\n  const {\n    isLoggedIn,\n    accountId,\n    balance,\n    signIn\n  } = useContext(AuthContext);\n\n\n  return (\n    <div style={{ height: \"100%\", backgroundColor: \"white\" }}>\n      {isLoggedIn ?\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n          <div>\n            {balance + \" ETH\"}\n\n          </div >\n          <div style={{ textAlign: \"right\" }}>\n            {accountId}\n          </div >\n        </div >\n        :\n        <div>\n          <Button onClick={() => {\n            signIn()\n          }}\n\n          > Sign In\n          </Button>\n        </div>\n      }\n\n      <Chat socket={socket}></Chat>\n    </div >\n  );\n}\n\nexport default App;\n","import \"./index.css\";\nimport App from \"./App\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { FirebaseProvider } from \"./contexts/firebaseContext\";\nimport { AuthProvider } from './contexts/AuthProvider';\nimport io from 'socket.io-client';\n\nconst socketURL =\n  window.location.hostname === 'localhost'\n    ? 'ws://localhost:8000'\n    : 'wss://train-network.herokuapp.com/';\n\nconst socket = io(socketURL, { transports: ['websocket'] });\n\nReactDOM.render(\n  <AuthProvider socket={socket}>\n    <FirebaseProvider>\n      <App socket={socket} />\n    </FirebaseProvider>\n  </AuthProvider>,\n  document.getElementById(\"root\")\n);\n\n"],"sourceRoot":""}